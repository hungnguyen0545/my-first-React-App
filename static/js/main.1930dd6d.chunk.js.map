{"version":3,"sources":["components/card/Card.component.jsx","components/card-list/Card-list.component.jsx","components/searchBox/Search-box.component.jsx","components/time/Time.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","monsters","id","alt","name","email","CardList","map","key","SearchBox","type","placeholder","this","onChange","handleChange","Component","Time","state","time","Date","toLocaleTimeString","intervalID","setInterval","stick","clearInterval","setState","App","SearchField","fetch","then","response","json","users","filterMonsters","filter","toLowerCase","includes","e","target","value","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mVAIaA,G,MAAO,SAAAC,GAChB,OAAO,yBAAKC,UAAU,kBAClB,yBAAKC,IAAK,wBAAwBF,EAAMG,SAASC,GAAG,yBAA0BC,IAAI,YAClF,gCAAML,EAAMG,SAASG,KAArB,KACA,2BAAKN,EAAMG,SAASI,UCHfC,G,MAAW,SAAAR,GACpB,OAAO,yBAAKC,UAAU,aAEVD,EAAMG,SAASM,KACb,SAAAN,GAAQ,OACR,kBAAC,EAAD,CAAMO,IAAOP,EAASC,GAAID,SAAUA,UCWvCQ,G,uLANX,OAAO,2BAAOC,KAAK,SAClBX,UAAW,SACXY,YAAcC,KAAKd,MAAMa,YACzBE,SAAUD,KAAKd,MAAMgB,mB,GANFC,cCyBTC,G,kBAhCX,aAAc,IAAD,8BACT,+CACKC,MAAQ,CACTC,MAAO,IAAIC,MAAOC,sBAHb,E,iFAOZ,IAAD,OACIR,KAAKS,WAAaC,aACd,kBAAM,EAAKC,UAAS,O,6CAKxBC,cAAcZ,KAAKS,c,8BAInBT,KAAKa,SAAS,CACVP,MAAO,IAAIC,MAAOC,yB,+BAKtB,OACI,uBAAGrB,UAAU,aAAb,gBACkBa,KAAKK,MAAMC,U,GA5BtBH,cC6CJW,G,kBAlCb,aACC,IAAD,8BACE,+CACKT,MAAQ,CAEXhB,SAAW,GACX0B,YAAc,IALlB,E,iFAQoB,IAAD,OACjBC,MAAM,8CACJC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAK,EAAKP,SAAS,CAACxB,SAAW+B,S,+BAG5C,IAAD,SACmCpB,KAAKK,MAA/BhB,EADT,EACSA,SAAU0B,EADnB,EACmBA,YACXM,EAAiBhC,EAASiC,QAAO,SAAAjC,GAAQ,OAC7CA,EAASG,KAAK+B,cAAcC,SAAST,EAAYQ,kBAEnD,OACE,yBAAKpC,UAAU,OACf,mDACE,kBAAC,EAAD,CACAY,YAAc,iBACdG,aAAgB,SAAAuB,GAAC,OAAI,EAAKZ,SAAS,CAACE,YAAcU,EAAEC,OAAOC,WAC3D,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAUtC,SAAUgC,S,GA7BVlB,cCAEyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,kB","file":"static/js/main.1930dd6d.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport './card.style.css'\r\n\r\nexport const Card = props => {\r\n    return <div className=\"card-container\">\r\n        <img src={'https://robohash.org/'+props.monsters.id+'?set=set2&size=180x180'} alt=\"monster\"/>\r\n        <h1> {props.monsters.name} </h1>    \r\n        <p >{props.monsters.email}</p>\r\n    </div>\r\n}","import React from 'react';\r\n\r\nimport {Card} from '../card/Card.component'\r\n\r\nimport './card-list.style.css'\r\nexport const CardList = props =>{\r\n    return <div className=\"card-list\">\r\n        {\r\n                props.monsters.map(\r\n                  monsters => (\r\n                  <Card key = {monsters.id} monsters={monsters} />\r\n                  )\r\n                )\r\n        }\r\n    </div>;\r\n} ","import React, { Component } from 'react'\r\n\r\nimport './Search-box.style.css'\r\n// use like a function\r\n// export const SearchBox = ({placeholder,handleChange}) => {\r\n//    return <input type=\"search\" \r\n//      className =\"search\" \r\n//      placeholder= {placeholder}\r\n//     onChange={handleChange}></input>\r\n// }\r\n\r\n// use like a class\r\nclass SearchBox extends Component\r\n{\r\n  render(){\r\n    return <input type=\"search\" \r\n     className =\"search\" \r\n     placeholder= {this.props.placeholder}\r\n     onChange={this.props.handleChange}></input>\r\n  }  \r\n}\r\nexport default SearchBox","import React, { Component } from 'react'\r\n\r\nimport './time.style.css'\r\nclass Time extends Component {\r\n\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            time : new Date().toLocaleTimeString()\r\n        };\r\n    }\r\n    componentDidMount()\r\n    {\r\n        this.intervalID = setInterval(\r\n            () => this.stick(), 1000\r\n        );\r\n    }\r\n    componentWillUnmount()\r\n    {\r\n        clearInterval(this.intervalID);\r\n    }\r\n    stick()\r\n    {\r\n        this.setState({\r\n            time : new Date().toLocaleTimeString()\r\n        })\r\n    }\r\n    render()\r\n    {\r\n        return (\r\n            <p className=\"App-clock\">\r\n                This time is {this.state.time}\r\n            </p>\r\n        )\r\n    };\r\n}\r\n\r\nexport default Time","import React,{Component} from 'react';\n\nimport {CardList} from './components/card-list/Card-list.component'//function\n\nimport SearchBox from './components/searchBox/Search-box.component'// class\n\nimport Time from './components/time/Time.component'\n\n//import Commment from './components/comment/Comment.component'\n\nimport './App.css';\n\nclass App extends Component\n{\n  constructor()// first function run when class excute\n  {\n    super();// call constructor method on the component class\n    this.state = {// state like js object --> this.state is object of App class : stored prop-var of \n      // this class\n      monsters : [],\n      SearchField : ''\n    };\n  }\n  componentDidMount(){ // get data from API\n    fetch('https://jsonplaceholder.typicode.com/users')\n     .then(response => response.json())\n     .then(users =>  this.setState({monsters : users}))\n    }\n  render()\n  {\n    const {monsters, SearchField } = this.state;\n    const filterMonsters = monsters.filter(monsters =>\n      monsters.name.toLowerCase().includes(SearchField.toLowerCase())\n    ); \n    return(\n      <div className=\"App\">\n      <h1> My first React App</h1>\n        <SearchBox\n        placeholder = \"Search Monster\"\n        handleChange = {e => this.setState({SearchField : e.target.value})} ></SearchBox> \n        <Time></Time>\n        <CardList monsters={filterMonsters} >\n        </CardList>\n     </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}